# syntax=docker.io/docker/dockerfile:1
# check=skip=SecretsUsedInArgOrEnv

# Install dependencies only when needed
FROM node:22-alpine AS builder
# Check https://github.com/nodejs/docker-node/tree/b4117f9333da4138b03a546ec926ef50a31506c3#nodealpine to understand why libc6-compat might be needed.
RUN apk add --no-cache libc6-compat python3 make g++ git wget tar build-base bsd-compat-headers curl gcc ca-certificates
      
WORKDIR /app

ARG TINYGO_VERSION=0.30.0
ARG GO_VERSION=1.21.6

RUN wget -q https://golang.org/dl/go${GO_VERSION}.linux-amd64.tar.gz && \
  tar -C /usr/local -xzf go${GO_VERSION}.linux-amd64.tar.gz && \
  rm go${GO_VERSION}.linux-amd64.tar.gz

RUN wget -q https://github.com/tinygo-org/tinygo/releases/download/v${TINYGO_VERSION}/tinygo${TINYGO_VERSION}.linux-amd64.tar.gz && \
  tar -C /usr/local -xzf tinygo${TINYGO_VERSION}.linux-amd64.tar.gz && \
  rm tinygo${TINYGO_VERSION}.linux-amd64.tar.gz

ENV RUSTUP_HOME=/usr/local/rustup \
  CARGO_HOME=/usr/local/cargo \
  PATH=/usr/local/cargo/bin:$PATH \
  RUST_VERSION=1.86.0

RUN set -eux; \
  apkArch="$(apk --print-arch)"; \
  case "$apkArch" in \
      x86_64) rustArch='x86_64-unknown-linux-musl'; rustupSha256='e6599a1c7be58a2d8eaca66a80e0dc006d87bbcf780a58b7343d6e14c1605cb2' ;; \
      aarch64) rustArch='aarch64-unknown-linux-musl'; rustupSha256='a97c8f56d7462908695348dd8c71ea6740c138ce303715793a690503a94fc9a9' ;; \
      *) echo >&2 "unsupported architecture: $apkArch"; exit 1 ;; \
  esac; \
  url="https://static.rust-lang.org/rustup/archive/1.28.2/${rustArch}/rustup-init"; \
  wget "$url"; \
  echo "${rustupSha256} *rustup-init" | sha256sum -c -; \
  chmod +x rustup-init; \
  ./rustup-init -y --no-modify-path --profile minimal --default-toolchain $RUST_VERSION --default-host ${rustArch}; \
  rm rustup-init; \
  chmod -R a+w $RUSTUP_HOME $CARGO_HOME; \
  rustup --version; \
  cargo --version; \
  rustc --version; \
  cargo install wasm-pack wasm-opt; \
  npm install -g npm@latest node-gyp@latest

ENV PATH="${PATH}:/usr/local/go/bin:/usr/local/tinygo/bin:/root/go/bin"
RUN mkdir -p /root/go
ENV GOPATH="/root/go"

# Tell git to use that repo instead of the .git file in the submodule.
COPY .git ./.git
COPY .gitmodules ./.gitmodules
COPY submods ./submods
RUN cd submods/upload-service && corepack enable pnpm && pnpm install && pnpm nx run-many -t build --prod --parallel --all
RUN cd submods/js-sdk && yarn install && yarn build

# Install dependencies based on the preferred package manager
COPY package.json yarn.lock* package-lock.json* pnpm-*.yaml* .npmrc* ./
COPY packages/lit-wrapper/package.json ./packages/lit-wrapper/
COPY packages/web-storage-wrapper/package.json ./packages/web-storage-wrapper/
COPY packages/lilypad-wrapper/package.json ./packages/lilypad-wrapper/
COPY patches ./patches

RUN corepack enable pnpm && pnpm i

COPY packages ./packages

RUN pnpm build:wrappers

RUN mv node_modules node_modules.dev
RUN pnpm install --prod

FROM node:22-alpine
WORKDIR /app
COPY --from=builder ./app/submods ./submods
COPY --from=builder ./app/packages ./packages
COPY --from=builder ./app/patches ./patches
COPY package.json yarn.lock* package-lock.json* pnpm-*.yaml* .npmrc* ./
RUN corepack enable pnpm
COPY --from=builder /app/node_modules.dev ./node_modules
COPY --from=builder /app/node_modules ./node_modules.prod
