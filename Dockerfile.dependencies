# syntax=docker.io/docker/dockerfile:1
# check=skip=SecretsUsedInArgOrEnv

# Install dependencies only when needed
FROM node:22-alpine
# Check https://github.com/nodejs/docker-node/tree/b4117f9333da4138b03a546ec926ef50a31506c3#nodealpine to understand why libc6-compat might be needed.
RUN apk add --no-cache libc6-compat python3 make g++ git wget tar build-base bsd-compat-headers
      
WORKDIR /app

ARG TINYGO_VERSION=0.30.0
ARG GO_VERSION=1.21.6

RUN wget -q https://golang.org/dl/go${GO_VERSION}.linux-amd64.tar.gz && \
  tar -C /usr/local -xzf go${GO_VERSION}.linux-amd64.tar.gz && \
  rm go${GO_VERSION}.linux-amd64.tar.gz

RUN wget -q https://github.com/tinygo-org/tinygo/releases/download/v${TINYGO_VERSION}/tinygo${TINYGO_VERSION}.linux-amd64.tar.gz && \
  tar -C /usr/local -xzf tinygo${TINYGO_VERSION}.linux-amd64.tar.gz && \
  rm tinygo${TINYGO_VERSION}.linux-amd64.tar.gz

ENV PATH="${PATH}:/usr/local/go/bin:/usr/local/tinygo/bin:/root/go/bin"
RUN mkdir -p /root/go
ENV GOPATH="/root/go"

# Initialize an empty git repo.
RUN git init /fakegit

# Tell git to use that repo instead of the .git file in the submodule.
COPY .git ./.git
COPY .gitmodules ./.gitmodules
COPY submods ./submods
RUN cd submods/js-sdk && yarn install && yarn build
RUN cd submods/upload-service && pnpm install && pnpm build
# Install dependencies based on the preferred package manager
COPY package.json yarn.lock* package-lock.json* pnpm-*.yaml* .npmrc* ./
COPY packages/lit-wrapper/package.json ./packages/lit-wrapper/
COPY packages/web-storage-wrapper/package.json ./packages/web-storage-wrapper/
COPY packages/lilypad-wrapper/package.json ./packages/lilypad-wrapper/
COPY patches ./patches

RUN corepack enable pnpm && pnpm i --frozen-lockfile

COPY packages ./packages

RUN pnpm build:wrappers

RUN mv node_modules node_modules.dev
RUN pnpm install --prod
RUN mv node_modules node_modules.prod
RUN mv node_modules.dev node_modules
