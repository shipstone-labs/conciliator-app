name: Build and Deploy

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  REGISTRY: gcr.io
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  IMAGE_NAME: my-conciliate-app

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write # Needed for GCP authentication

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.13.1'

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 10.11.0
          run_install: true

      # Currently all those packages should be built locally
      # Since they also need to be available to other developers.
      # - name: Cache dist-packages
      #   id: cache-dist-packages
      #   uses: actions/cache@v4
      #   with:
      #     path: dist-packages
      #     key: ${{ runner.os }}-dist-packages-${{ hashFiles('submods/**', 'packages/**', '!**node_modules/**', '!**.next/**') }}
      #     restore-keys: |
      #       ${{ runner.os }}-dist-packages-

      # - name: Bootstrap packages if needed
      #   if: steps.cache-dist-packages.outputs.cache-hit != 'true'
      #   run: |
      #     echo "dist-packages cache miss, running bootstrap..."
      #     ./scripts/bootstrap-packages.sh

      # - name: Fix packages
      #   run: ./scripts/fix-packages.sh

      - name: Install dependencies
        run: pnpm install

      - name: Build
        run: pnpm run build
        env:
          STYTCH_APP_ID: build-value
          STYTCH_APP_SECRET: something
          STYTCH_ENV: test
          NEXT_TELEMETRY_DISABLED: 1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Setup GCP only on push to main branch
      - name: Authenticate to Google Cloud
        if: github.event_name != 'pull_request'
        id: auth
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}

      - name: Set up GCP CLI
        if: github.event_name != 'pull_request'
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
      - name: Configure Docker for GCP
        if: github.event_name != 'pull_request'
        run: gcloud auth configure-docker $REGISTRY --quiet

      # Determine image tag
      - name: Set Image Tag
        id: tagname
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            TAG_NAME="pr-${{ github.event.pull_request.number }}"
          else
            TAG_NAME="${{ github.ref_name }}"
          fi

          SHA_SHORT=$(echo "${{ github.sha }}" | cut -c1-7)

          # Output tag info
          echo "tag=${TAG_NAME}" >> $GITHUB_OUTPUT
          echo "sha_short=${SHA_SHORT}" >> $GITHUB_OUTPUT
          echo "Using tags: ${TAG_NAME}, ${SHA_SHORT}"

      # Build and push Docker image
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          load: ${{ github.event_name == 'pull_request' }}
          tags: |
            ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
            ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.IMAGE_NAME }}:${{ steps.tagname.outputs.tag }}
            ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.IMAGE_NAME }}:${{ steps.tagname.outputs.sha_short }}
          build-args: |
            NEXT_PUBLIC_SERVICE_NAME=conciliator-app
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Deploy to Cloud Run (only on push to main)
      # - name: Deploy to Cloud Run
      #   if: github.event_name != 'pull_request'
      #   run: |
      #     gcloud run deploy my-conciliate-app \
      #       --image ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.IMAGE_NAME }}:${{ github.sha }} \
      #       --region us-central1 \
      #       --platform managed \
      #       --allow-unauthenticated