steps:
  # Post build start notification with logs URL
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:slim'
    id: NotifyBuildStart
    entrypoint: bash
    args:
      - -c
      - |
        if [[ "$_PR_NUMBER" != "" ]]; then
          # Install GitHub CLI if needed
          apt-get update -y && apt-get install -y gh
          
          # Authenticate with GitHub using service account token
          gcloud secrets versions access latest --secret=github-token | gh auth login --with-token
          
          # Post build URL to the PR
          BUILD_URL="https://console.cloud.google.com/cloud-build/builds/$$BUILD_ID?project=$$PROJECT_ID"
          gh pr comment $_PR_NUMBER --repo "$_GITHUB_OWNER/$_GITHUB_REPO" --body "🔄 Build started: [View logs]($$BUILD_URL)"
        fi

  # Set up cache tag based on branch/PR
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:slim'
    id: SetupCacheVars
    entrypoint: bash
    args:
      - -c
      - |
        # Set cache tag based on branch or PR
        if [[ "$BRANCH_NAME" == "main" ]]; then
          CACHE_TAG="main-latest"
        elif [[ "$BRANCH_NAME" == "legacy" ]]; then
          CACHE_TAG="legacy-latest"
        elif [[ "$_PR_NUMBER" != "" ]]; then
          CACHE_TAG="pr-$_PR_NUMBER-latest"
        else
          # Replace slashes with hyphens for branch name
          BRANCH_SAFE=$BRANCH_NAME
          BRANCH_SAFE=$${BRANCH_SAFE//\//-}
          CACHE_TAG="$$BRANCH_SAFE-latest"
        fi
        
        # Save to a file that can be accessed by other steps
        echo "$$CACHE_TAG" > /workspace/cache_tag.txt
        echo "Using cache tag: $$CACHE_TAG"
        
        # Pull the cache image if it exists (won't fail if it doesn't)
        docker pull $_AR_HOSTNAME/$_AR_PROJECT_ID/$_AR_REPOSITORY/conciliator-app/$_SERVICE_NAME:$$CACHE_TAG || true

        if [[ "$_PR_NUMBER" != "" ]]; then
          # Install GitHub CLI if needed
          apt-get update -y && apt-get install -y gh
          
          # Authenticate with GitHub using service account token
          gcloud secrets versions access latest --secret=github-token | gh auth login --with-token
          
          # Create deployment and get deployment ID
          echo "Creating GitHub deployment..."
          DEPLOYMENT_PAYLOAD=$(gh api \
            repos/$_GITHUB_OWNER/$_GITHUB_REPO/deployments \
            -X POST \
            -f ref="PR #$_PR_NUMBER" \
            -f environment="cloud-run-$_DEPLOY_REGION" \
            -f description="Deploy to Cloud Run" \
            -f auto_merge=false \
            -f required_contexts='[]')
          
          DEPLOYMENT_ID=$(echo "$$DEPLOYMENT_PAYLOAD" | grep -o '"id": [0-9]*' | head -1 | awk '{print $$2}')
          echo "Created deployment ID: $$DEPLOYMENT_ID"
          
          # Save deployment ID for potential failure notification
          echo "$$DEPLOYMENT_ID" > /workspace/deployment_id
          
          # Update deployment status to in_progress
          gh api \
            repos/$_GITHUB_OWNER/$_GITHUB_REPO/deployments/$$DEPLOYMENT_ID/statuses \
            -X POST \
            -f state="in_progress" \
            -f description="Building Container..."
        fi

  # Build with cache
  - name: 'gcr.io/cloud-builders/docker'
    id: Build
    entrypoint: bash
    args:
      - -c
      - |
        CACHE_TAG=$$(cat /workspace/cache_tag.txt)
        if ! docker build \
          --tag=$_AR_HOSTNAME/$_AR_PROJECT_ID/$_AR_REPOSITORY/conciliator-app/$_SERVICE_NAME:$COMMIT_SHA \
          --cache-from=$_AR_HOSTNAME/$_AR_PROJECT_ID/$_AR_REPOSITORY/conciliator-app/$_SERVICE_NAME:$$CACHE_TAG \
          --build-arg=NEXT_PUBLIC_STYTCH_PROJECT_ENV=$_NEXT_PUBLIC_STYTCH_PROJECT_ENV \
          --build-arg=NEXT_PUBLIC_STYTCH_PUBLIC_TOKEN=$_NEXT_PUBLIC_STYTCH_PUBLIC_TOKEN \
          --build-arg=NEXT_PUBLIC_STYTCH_APP_ID=$_NEXT_PUBLIC_STYTCH_APP_ID \
          --build-arg=NEXT_PUBLIC_LIT_RELAY_API_KEY=$_NEXT_PUBLIC_LIT_RELAY_API_KEY \
          --build-arg=NEXT_PUBLIC_LIT_CONTRACT_ADDRESS=$_NEXT_PUBLIC_LIT_CONTRACT_ADDRESS \
          --build-arg=NEXT_PUBLIC_LIT_ADDRESS=$_NEXT_PUBLIC_LIT_ADDRESS \
          --build-arg=NEXT_PUBLIC_FIREBASE_CONFIG=$_NEXT_PUBLIC_FIREBASE_CONFIG \
          .
        then
          echo "Build failed"
          echo "failed" > /workspace/build_status
          exit 0
        fi

  # Push with commit SHA
  - name: 'gcr.io/cloud-builders/docker'
    id: Push
    entrypoint: bash
    args:
      - -c
      - |
        if [ "$(cat /workspace/build_status)" == "failed" ]; then
          echo "Build failed, skipping push"
          exit 0
        fi
        docker push '$_AR_HOSTNAME/$_AR_PROJECT_ID/$_AR_REPOSITORY/conciliator-app/$_SERVICE_NAME:$COMMIT_SHA'
      
  # Tag and push with cache tag
  - name: 'gcr.io/cloud-builders/docker'
    id: TagForCache
    entrypoint: bash
    args:
      - -c
      - |
        if [ "$(cat /workspace/build_status)" == "failed" ]; then
          echo "Build failed, skipping tag"
          exit 0
        fi
        CACHE_TAG=$$(cat /workspace/cache_tag.txt)
        docker tag $_AR_HOSTNAME/$_AR_PROJECT_ID/$_AR_REPOSITORY/conciliator-app/$_SERVICE_NAME:$COMMIT_SHA $_AR_HOSTNAME/$_AR_PROJECT_ID/$_AR_REPOSITORY/conciliator-app/$_SERVICE_NAME:$$CACHE_TAG
        docker push $_AR_HOSTNAME/$_AR_PROJECT_ID/$_AR_REPOSITORY/conciliator-app/$_SERVICE_NAME:$$CACHE_TAG

  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:slim'
    id: Deploy
    entrypoint: bash
    args:
      - -c
      - |
        if [ "$(cat /workspace/build_status)" == "failed" ]; then
          echo "Build failed, skipping deploy"
          exit 0
        fi
        # Set tag based on branch or PR
        DO_ROLLOUT=""
        if [[ "$BRANCH_NAME" == "main" ]]; then
          # No tag for main branch
          TAG_OPTION="--no-traffic"
          DO_ROLLOUT="yes"
        elif [[ "$BRANCH_NAME" == "legacy" ]]; then
          # Tag as legacy for legacy branch
          TAG_OPTION="--tag=legacy --no-traffic"
        elif [[ "$_PR_NUMBER" != "" ]]; then
          # Tag with PR number for pull requests
          TAG_OPTION="--tag=pr-$_PR_NUMBER --no-traffic"
        else
          # Default: no tag
          TAG_OPTION="--no-traffic"
        fi
        
        if [[ "$_PR_NUMBER" != "" ]]; then
          # Install GitHub CLI if needed
          apt-get update -y && apt-get install -y gh
          
          # Authenticate with GitHub using service account token
          gcloud secrets versions access latest --secret=github-token | gh auth login --with-token
          
          DEPLOYMENT_ID=$(cat /workspace/deployment_id)
          
          # Update deployment status to in_progress
          gh api \
            repos/$_GITHUB_OWNER/$_GITHUB_REPO/deployments/$$DEPLOYMENT_ID/statuses \
            -X POST \
            -f state="in_progress" \
            -f description="Deploying Container..."
        fi

        # Execute the deploy command with dynamic tag
        # Use $$ to escape bash variables in Cloud Build YAML
        gcloud run services update $_SERVICE_NAME \
          --platform=managed \
          --image=$_AR_HOSTNAME/$_AR_PROJECT_ID/$_AR_REPOSITORY/conciliator-app/$_SERVICE_NAME:$COMMIT_SHA \
          --labels=managed-by=gcp-cloud-build-deploy-cloud-run,commit-sha=$COMMIT_SHA,gcb-build-id=$BUILD_ID,gcb-trigger-id=$_TRIGGER_ID \
          --region=$_DEPLOY_REGION \
          --quiet \
          $$TAG_OPTION
        if [[ "$$DO_ROLLOUT" == "yes" ]]
        then
          gcloud run services update-traffic $_SERVICE_NAME \
            --platform=managed \
            --to-latest \
            --region=$_DEPLOY_REGION \
            --quiet
        fi
        
        # Get the Cloud Run URL for this revision
        SERVICE_URL=$(gcloud run services describe $_SERVICE_NAME --region=$_DEPLOY_REGION --format='value(status.url)')
        CACHE_TAG=$(cat /workspace/cache_tag.txt)
        REVISION_URL="$${SERVICE_URL}?tag=$${CACHE_TAG}"
        echo "Deployment URL: $$REVISION_URL"
        
        # Create GitHub deployment and update status if this is a PR build
        if [[ "$_PR_NUMBER" != "" ]]; then          
          # Deploy happens here (already done above)
          
          # Build URL for logs
          BUILD_URL="https://console.cloud.google.com/cloud-build/builds/$$BUILD_ID?project=$$PROJECT_ID"
          
          # Update deployment status to success with deployment URL
          gh api \
            repos/$_GITHUB_OWNER/$_GITHUB_REPO/deployments/$$DEPLOYMENT_ID/statuses \
            -X POST \
            -f state="success" \
            -f description="Deployed to Cloud Run" \
            -f environment_url="$$REVISION_URL" \
            -f log_url="$$BUILD_URL"
          
          # Also post a comment for easier access
          gh pr comment $_PR_NUMBER --repo "$_GITHUB_OWNER/$_GITHUB_REPO" --body "✅ Deployment successful: [View app]($$REVISION_URL) | [View logs]($$BUILD_URL)"
          
          # Mark deployment as successful for the final status check
          touch /workspace/deployment_success
        fi
# Add a final notification step to handle failures
  - name: 'gcr.io/cloud-builders/curl'
    id: NotifyFailure
    waitFor: ['Build'] # This makes it run after the build step, regardless of build success
    entrypoint: bash
    args:
      - -c
      - |
        if [[ "$_PR_NUMBER" != "" ]]; then
          # Only run this if we haven't marked success
          if [[ ! -f /workspace/deployment_success ]]; then
            apt-get update -y && apt-get install -y gh
          
            # Authenticate with GitHub using service account token
            gcloud secrets versions access latest --secret=github-token | gh auth login --with-token
          
            DEPLOYMENT_ID=$(cat /workspace/deployment_id)
            
            # Build URL and notify failure
            BUILD_URL="https://console.cloud.google.com/cloud-build/builds/$$BUILD_ID?project=$$PROJECT_ID"
            gh pr comment $_PR_NUMBER --repo "$_GITHUB_OWNER/$_GITHUB_REPO" --body "❌ Build failed: [View logs]($$BUILD_URL)"
            
            # Create deployment status if a deployment was created
            if [[ -f /workspace/deployment_id ]]; then
              DEPLOYMENT_ID=$(cat /workspace/deployment_id)
              gh api \
                repos/$_GITHUB_OWNER/$_GITHUB_REPO/deployments/$$DEPLOYMENT_ID/statuses \
                -X POST \
                -f state="failure" \
                -f description="Deployment failed" \
                -f log_url="$$BUILD_URL"
            fi
          fi
        fi
        # Always exit with success to avoid breaking the build further
        exit 0

images:
  - >-
    $_AR_HOSTNAME/$_AR_PROJECT_ID/$_AR_REPOSITORY/conciliator-app/$_SERVICE_NAME:$COMMIT_SHA
options:
  substitutionOption: ALLOW_LOOSE
  logging: CLOUD_LOGGING_ONLY
substitutions:
  _TRIGGER_ID: 9cb89cf6-252e-44ae-a6b5-4e104ca14efa
  _AR_HOSTNAME: us-central1-docker.pkg.dev
  _AR_REPOSITORY: cloud-run-source-deploy
  _AR_PROJECT_ID: conciliator-456321
  _PLATFORM: managed
  _SERVICE_NAME: conciliator
  _DEPLOY_REGION: us-central1
  _NEXT_PUBLIC_STYTCH_PROJECT_ENV: ''
  _NEXT_PUBLIC_STYTCH_PUBLIC_TOKEN: ''
  _NEXT_PUBLIC_STYTCH_APP_ID: ''
  _NEXT_PUBLIC_LIT_RELAY_API_KEY: ''
  _NEXT_PUBLIC_LIT_CONTRACT_ADDRESS: ''
  _NEXT_PUBLIC_LIT_ADDRESS: ''
  _NEXT_PUBLIC_FIREBASE_CONFIG: ''
  _GITHUB_OWNER: ''
  _GITHUB_REPO: ''

tags:
  - gcp-cloud-build-deploy-cloud-run
  - gcp-cloud-build-deploy-cloud-run-managed
  - conciliator
  # Build-specific tags will be added dynamically by the CancelPreviousBuilds step
