steps:
  # Post build start notification with logs URL
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:slim'
    id: NotifyBuildStart
    entrypoint: bash
    args:
      - -c
      - |
        if [[ "$_PR_NUMBER" != "" ]]; then
          # Install GitHub CLI if needed
          apt-get update -y && apt-get install -y gh jq
          
          # Authenticate with GitHub using service account token
          gcloud secrets versions access latest --secret=github-token | gh auth login --with-token
          
          # Create a function to get comment IDs matching a specific pattern
          get_matching_comments() {
            pr_number=$1
            pattern=$2

            # Use GraphQL to get comments for the PR
            gh api graphql -f query='
              query($owner:String!, $repo:String!, $pr_number:Int!) {
                repository(owner:$owner, name:$repo) {
                  pullRequest(number:$pr_number) {
                    comments(first:100) {
                      nodes {
                        id
                        body
                        author {
                          login
                        }
                      }
                    }
                  }
                }
              }' -F owner="$_GITHUB_OWNER" -F repo="$_GITHUB_REPO" -F pr_number="$pr_number" | \
            jq -r --arg pattern "$pattern" '.data.repository.pullRequest.comments.nodes[] | select(.body | contains($pattern)) | .id'
          }
          # Get IDs of comments containing your tag
          comment_ids=$(get_matching_comments "$_PR_NUMBER" "<!-- build-error-report -->")

          # Delete matching comments
          for id in $comment_ids; do
            if ! gh api graphql -f query='
              mutation($id:ID!) {
                deleteIssueComment(input:{id:$id}) {
                  clientMutationId
                }
              }' -F id="$id"
            then
              echo "Failed to delete comment with ID: $id"
            fi
          done

          # Post build URL to the PR
          BUILD_URL="https://console.cloud.google.com/cloud-build/builds/$$BUILD_ID?project=$_AR_PROJECT_ID"
          
          echo "## 🔄 Build started: [View logs]($$BUILD_URL)" > /workspace/message.md
          echo "<!-- build-error-report -->" >> /workspace/message.md
          gh pr comment $_PR_NUMBER --repo "$_GITHUB_OWNER/$_GITHUB_REPO" --body-file /workspace/message.md
        fi

  # Set up cache tag based on branch/PR
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:slim'
    id: SetupCacheVars
    entrypoint: bash
    args:
      - -c
      - |
        sed -e 's#git@github.com:shipstone-labs#https://github.com/shipstone-labs#g' -i.bak .gitmodules
        git submodule update --init --recursive

        # Set cache tag based on branch or PR
        if [[ "$BRANCH_NAME" == "main" ]]; then
          CACHE_TAG="main-latest"
        elif [[ "$BRANCH_NAME" == "legacy" ]]; then
          CACHE_TAG="legacy-latest"
        elif [[ "$_PR_NUMBER" != "" ]]; then
          CACHE_TAG="pr-$_PR_NUMBER-latest"
        else
          # Replace slashes with hyphens for branch name
          BRANCH_SAFE=$BRANCH_NAME
          BRANCH_SAFE=$${BRANCH_SAFE//\//-}
          CACHE_TAG="$$BRANCH_SAFE-latest"
        fi
        
        # Save to a file that can be accessed by other steps
        echo -n "$$CACHE_TAG" > /workspace/cache_tag.txt
        echo "Using cache tag: $$CACHE_TAG"
        
        if [[ "$_PR_NUMBER" != "" ]]; then
          # Install GitHub CLI if needed
          apt-get update -y && apt-get install -y gh
          
          # Authenticate with GitHub using service account token
          gcloud secrets versions access latest --secret=github-token | gh auth login --with-token
          
          # Create deployment and get deployment ID
          echo "Creating GitHub deployment..."
          DEPLOYMENT_PAYLOAD=$(gh api \
            repos/$_GITHUB_OWNER/$_GITHUB_REPO/deployments \
            -X POST \
            -f "ref=$COMMIT_SHA" \
            -f "environment=cloud-run-$_DEPLOY_REGION" \
            -f "description=Deploy to Cloud Run" \
            -F auto_merge=false || echo "")
          echo "Deployment payload: $$DEPLOYMENT_PAYLOAD"
          DEPLOYMENT_ID=$(echo "$$DEPLOYMENT_PAYLOAD" | grep -o '"id": [0-9]*' | head -1 | awk '{print $$2}')
          echo "Created deployment ID: $$DEPLOYMENT_ID"
          
          # Save deployment ID for potential failure notification
          echo "$$DEPLOYMENT_ID" > /workspace/deployment_id
          
          if [[ "$$DEPLOYMENT_ID" != "" ]]; then
            # Update deployment status to in_progress
            gh api \
              repos/$_GITHUB_OWNER/$_GITHUB_REPO/deployments/$$DEPLOYMENT_ID/statuses \
              -X POST \
              -F state=in_progress \
              -f description="Building Container..."
          fi
        fi
        
  - name: 'gcr.io/cloud-builders/docker'
    id: Build
    entrypoint: bash
    args:
      - -c
      - |
        # Define project ID and repository
        # Create a hash of all dependency-related files
        # Explicitly exclude node_modules directories
        echo "Calculating dependency hash..."
        git submodule status > .file
        find . -type f \( -name "package.json" -o -name "pnpm-lock.yaml" \
          -o -ipath "./packages/*" -o -name "Dockerfile.dependencies" \
          -o -name "pnpm-workspace.yaml" \) -not -path "*/node_modules/*" \
          | sort | xargs cat >> .file
        DEP_HASH=$(cat .file | sha256sum | cut -d ' ' -f 1 | cut -c 1-12)
        echo "Dependency hash: $${DEP_HASH}"

        # Image tag based on hash
        IMAGE_TAG="$_AR_HOSTNAME/$_AR_PROJECT_ID/$_AR_REPOSITORY/conciliate-app/conciliator/deps:$${DEP_HASH}"

        # Check if the image with this hash already exists
        echo "Checking if dependency image already exists..."
        if ! docker pull "$${IMAGE_TAG}" &>/dev/null; then
          echo "🔨 Building dependency container $${IMAGE_TAG}..."

          # Build the dependency container
          if ! (docker build \
            -t "$${IMAGE_TAG}" \
            -f Dockerfile.dependencies \
            --build-arg NODE_ENV=production \
            . 2>&1) | tee ./.info.log
          then
            cp ./.info.log /workspace/raw_error.log
            echo "Build failed"
            touch /workspace/failed
            exit 0
          fi

          # Push the container
          echo "📤 Pushing dependency container $${IMAGE_TAG}..."
          docker push "$${IMAGE_TAG}"

          # Store the container reference for later use
          echo "$${IMAGE_TAG}" > .dependency-container

          echo "✅ Dependency container built and pushed successfully!"
        else
          echo "✅ Dependency container already built and up to date!"
        fi

        CACHE_TAG=$$(cat /workspace/cache_tag.txt)
        # Pull the cache image if it exists (won't fail if it doesn't)
        docker pull $_AR_HOSTNAME/$_AR_PROJECT_ID/$_AR_REPOSITORY/conciliator-app/$_SERVICE_NAME:$$CACHE_TAG || true
        export DOCKER_BUILDKIT=1
        NAME=${_SERVICE_NAME}
        if [[ "$_PR_NUMBER" != "" ]]; then
          NAME="$${NAME}:pr-$_PR_NUMBER"
        else
          NAME="$${NAME}:latest"
        fi
        NAME="$${NAME}:${COMMIT_SHA}"
        echo "Building image with tag: $${NAME}"
        set -o pipefail
        if ! (docker build \
          --tag=$_AR_HOSTNAME/$_AR_PROJECT_ID/$_AR_REPOSITORY/conciliator-app/$_SERVICE_NAME:$COMMIT_SHA \
          --cache-from=$_AR_HOSTNAME/$_AR_PROJECT_ID/$_AR_REPOSITORY/conciliator-app/$_SERVICE_NAME:$$CACHE_TAG \
          --build-arg=IMAGE_TAG=$${IMAGE_TAG} \
          --build-arg=NEXT_PUBLIC_SERVICE_NAME=$${NAME} \
          --build-arg BUILDKIT_INLINE_CACHE=1 \
          . 2>&1) | tee ./.info.log
        then
          cp ./.info.log /workspace/raw_error.log
          echo "Build failed"
          touch /workspace/failed
          exit 0
        fi
        docker push '$_AR_HOSTNAME/$_AR_PROJECT_ID/$_AR_REPOSITORY/conciliator-app/$_SERVICE_NAME:$COMMIT_SHA'
        CACHE_TAG=$$(cat /workspace/cache_tag.txt)
        docker tag $_AR_HOSTNAME/$_AR_PROJECT_ID/$_AR_REPOSITORY/conciliator-app/$_SERVICE_NAME:$COMMIT_SHA \
          $_AR_HOSTNAME/$_AR_PROJECT_ID/$_AR_REPOSITORY/conciliator-app/$_SERVICE_NAME:$$CACHE_TAG
        docker push $_AR_HOSTNAME/$_AR_PROJECT_ID/$_AR_REPOSITORY/conciliator-app/$_SERVICE_NAME:$$CACHE_TAG

  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:slim'
    id: Deploy
    entrypoint: bash
    args:
      - -c
      - |
        if [ -f /workspace/failed ]; then
          echo "Build failed, skipping deploy"
          exit 0
        fi
        # Set tag based on branch or PR
        DO_ROLLOUT=""
        SERVICE_NAME_ENV="$${_SERVICE_NAME}"
        if [[ "$BRANCH_NAME" == "main" ]]; then
          # No tag for main branch
          TAG_OPTION="--no-traffic"
          DO_ROLLOUT="yes"
          SERVICE_NAME_ENV="${_SERVICE_NAME}:latest"
        elif [[ "$BRANCH_NAME" == "legacy" ]]; then
          # Tag as legacy for legacy branch
          TAG_OPTION="--tag=legacy --no-traffic"
          SERVICE_NAME_ENV="${_SERVICE_NAME}:legacy"
        elif [[ "$_PR_NUMBER" != "" ]]; then
          # Tag with PR number for pull requests
          TAG_OPTION="--tag=pr-$_PR_NUMBER --no-traffic"
          SERVICE_NAME_ENV="${_SERVICE_NAME}:pr-$_PR_NUMBER"
        else
          # Default: no tag
          TAG_OPTION="--no-traffic"
          SERVICE_NAME_ENV="${_SERVICE_NAME}:unknown"
        fi
        
        if [[ "$_PR_NUMBER" != "" ]]; then
          # Install GitHub CLI if needed
          apt-get update -y && apt-get install -y gh
          
          # Authenticate with GitHub using service account token
          gcloud secrets versions access latest --secret=github-token | gh auth login --with-token
          
          DEPLOYMENT_ID=$(cat /workspace/deployment_id)
          
          if [[ "$$DEPLOYMENT_ID" != "" ]]; then
            # Update deployment status to in_progress
            gh api \
              repos/$_GITHUB_OWNER/$_GITHUB_REPO/deployments/$$DEPLOYMENT_ID/statuses \
              -X POST \
              -F state=in_progress \
              -f description="Deploying Container..."
          fi
        fi

        # Execute the deploy command with dynamic tag
        # Use $$ to escape bash variables in Cloud Build YAML
        (gcloud run services update $_SERVICE_NAME \
          --platform=managed \
          --set-env-vars=SERVICE_NAME=$${SERVICE_NAME_ENV} \
          --image=$_AR_HOSTNAME/$_AR_PROJECT_ID/$_AR_REPOSITORY/conciliator-app/$_SERVICE_NAME:$COMMIT_SHA \
          --labels=managed-by=gcp-cloud-build-deploy-cloud-run,commit-sha=$COMMIT_SHA,gcb-build-id=$BUILD_ID,gcb-trigger-id=$_TRIGGER_ID \
          --region=$_DEPLOY_REGION \
          --quiet \
          $$TAG_OPTION 2>&1) | tee ./.info.log
        REV=$(sed < ./.info.log -n -e 's#The revision can be reached directly at https://\(.*\)#https://\1#pi')
        if [[ "$$DO_ROLLOUT" == "yes" ]]
        then
          gcloud run services update-traffic $_SERVICE_NAME \
            --platform=managed \
            --to-latest \
            --region=$_DEPLOY_REGION \
            --quiet
        fi
        
        # Get the Cloud Run URL for this revision
        SERVICE_URL=$(gcloud run services describe $_SERVICE_NAME --region=$_DEPLOY_REGION --format='value(status.url)')
        CACHE_TAG=$(cat /workspace/cache_tag.txt)
        
        # Create GitHub deployment and update status if this is a PR build
        if [[ "$_PR_NUMBER" != "" ]]; then          
          # Deploy happens here (already done above)
          REVISION_URL="$${REV}"
          echo "Deployment URL: $$REVISION_URL"

          # Build URL for logs
          BUILD_URL="https://console.cloud.google.com/cloud-build/builds/$$BUILD_ID?project=$_AR_PROJECT_ID"
          
          if [[ "$$DEPLOYMENT_ID" != "" ]]; then
            # Update deployment status to success
            gh api \
              repos/$_GITHUB_OWNER/$_GITHUB_REPO/deployments/$$DEPLOYMENT_ID/statuses \
              -X POST \
              -F state=success \
              -f description="Deployed to Cloud Run" \
              -f environment_url=$$REVISION_URL \
              -f log_url="$$BUILD_URL"
          fi
          
          # Also post a comment for easier access
          echo "## ✅ Deployment successful: [View app]($$REVISION_URL) | [View logs]($$BUILD_URL)" > /workspace/message.md
          echo "<!-- build-error-report -->" >> /workspace/message.md
          gh pr comment $_PR_NUMBER --repo "$_GITHUB_OWNER/$_GITHUB_REPO" --body-file /workspace/message.md
          # Mark deployment as successful for the final status check
          touch /workspace/deployment_success
        else
          REVISION_URL="$${SERVICE_URL}"
          echo "Deployment URL: $$REVISION_URL"
        fi
  - name: 'node'
    id: ProcessErrors
    entrypoint: bash
    args:
      - -c
      - |
        if [ -f /workspace/failed ]; then
          echo "Extracting errors"
          corepack enable pnpm
          pnpm install
          node ./extract-build-errors.mjs \
            /workspace/raw_error.log > /workspace/raw_error.md
          cat /workspace/raw_error.md
          exit 0
        fi

  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:slim'
    id: NotifyFailure
    waitFor: ['ProcessErrors'] # This makes it run after the build step, regardless of build success
    entrypoint: bash
    args:
      - -c
      - |
        if [[ "$_PR_NUMBER" != "" ]]; then
          # Only run this if we haven't marked success
          if [[ ! -f /workspace/deployment_success ]]; then
            apt-get update -y && apt-get install -y gh
          
            # Authenticate with GitHub using service account token
            gcloud secrets versions access latest --secret=github-token | gh auth login --with-token
          
            DEPLOYMENT_ID=$(cat /workspace/deployment_id)
            
            # Build URL and notify failure
            BUILD_URL="https://console.cloud.google.com/cloud-build/builds/$$BUILD_ID?project=$_AR_PROJECT_ID"
            echo "## ❌ Build failed: [View logs]($$BUILD_URL)" > /workspace/error.md
            echo "<!-- build-error-report -->" >> /workspace/error.md
            echo "" >> /workspace/error.md
            echo "" >> /workspace/error.md
            cat /workspace/raw_error.md >> /workspace/error.md
            gh pr comment $_PR_NUMBER --repo "$_GITHUB_OWNER/$_GITHUB_REPO" --body-file /workspace/error.md
            
            # Create deployment status if a deployment was created
            if [[ -f /workspace/deployment_id ]]; then
              DEPLOYMENT_ID=$(cat /workspace/deployment_id)
              if [[ "$$DEPLOYMENT_ID" != "" ]]; then
                gh api \
                  repos/$_GITHUB_OWNER/$_GITHUB_REPO/deployments/$$DEPLOYMENT_ID/statuses \
                  -X POST \
                  -F state=failure \
                  -f description="Deployment failed" \
                  -f log_url="$$BUILD_URL"
              fi
            fi
          fi
        fi
        # Always exit with success to avoid breaking the build further
        exit 0

images:
  - >-
    $_AR_HOSTNAME/$_AR_PROJECT_ID/$_AR_REPOSITORY/conciliator-app/$_SERVICE_NAME:$COMMIT_SHA
options:
  substitutionOption: ALLOW_LOOSE
  logging: CLOUD_LOGGING_ONLY
  machineType: 'E2_HIGHCPU_8'
substitutions:
  _TRIGGER_ID: 9cb89cf6-252e-44ae-a6b5-4e104ca14efa
  _AR_HOSTNAME: us-central1-docker.pkg.dev
  _AR_REPOSITORY: cloud-run-source-deploy
  _AR_PROJECT_ID: conciliator-456321
  _PLATFORM: managed
  _SERVICE_NAME: conciliator
  _DEPLOY_REGION: us-central1
  _NEXT_PUBLIC_STYTCH_PROJECT_ENV: ''
  _NEXT_PUBLIC_STYTCH_PUBLIC_TOKEN: ''
  _NEXT_PUBLIC_STYTCH_APP_ID: ''
  _NEXT_PUBLIC_LIT_RELAY_API_KEY: ''
  _NEXT_PUBLIC_LIT_CONTRACT_ADDRESS: ''
  _NEXT_PUBLIC_LIT_ADDRESS: ''
  _NEXT_PUBLIC_FIREBASE_CONFIG: ''
  _GITHUB_OWNER: ''
  _GITHUB_REPO: ''

tags:
  - gcp-cloud-build-deploy-cloud-run
  - gcp-cloud-build-deploy-cloud-run-managed
  - conciliator
  # Build-specific tags will be added dynamically by the CancelPreviousBuilds step
